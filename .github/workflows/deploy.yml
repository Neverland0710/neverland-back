# .github/workflows/deploy.yml
name: 🚀 Deploy to EC2 with Docker Compose

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v3

      - name: 🚀 Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 📁 애플리케이션 디렉토리로 이동
            cd ~/app
            
            # 🧹 기존 컨테이너 정리
            docker-compose down || true
            docker system prune -f
            
            # 📥 최신 코드 받기
            rm -rf spring-server
            git clone https://github.com/Neverland0710/neverland-back.git spring-server
            
            # 📄 application.properties 생성 (환경변수 방식)
            mkdir -p spring-server/src/main/resources
            cat > spring-server/src/main/resources/application.properties << 'PROPS_EOF'
            # ✅ DB 설정 (환경변수에서 읽음)
            spring.datasource.url=${SPRING_DATASOURCE_URL}
            spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
            spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
            spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

            # ✅ JPA 설정
            spring.jpa.hibernate.ddl-auto=update
            spring.jpa.show-sql=false
            spring.jpa.properties.hibernate.format_sql=true
            spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
            spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

            # ✅ 정적 리소스 및 파일 업로드 설정
            spring.web.resources.static-locations=classpath:/static/images/
            spring.servlet.multipart.max-file-size=20MB
            spring.servlet.multipart.max-request-size=20MB
            spring.datasource.hikari.max-lifetime=1800000
            spring.datasource.hikari.idle-timeout=600000

            # ✅ 포트 설정
            server.port=${SERVER_PORT:8086}
            server.address=0.0.0.0

            # ✅ JWT 설정 (환경변수 사용)
            jwt.secret=${JWT_SECRET}
            jwt.expiration=${JWT_EXPIRATION:3600000}

            # ✅ AWS S3 설정
            cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID}
            cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY}
            cloud.aws.region.static=${AWS_REGION}
            cloud.aws.s3.bucket=${S3_BUCKET_NAME}
            cloud.aws.stack.auto=false

            # ✅ Firebase 설정
            firebase.config-json=classpath:firebase_adminsdk.json

            # ✅ 로깅
            logging.level.root=INFO
            logging.level.projcet.neverland=DEBUG

            # ✅ Management 엔드포인트
            management.endpoints.web.exposure.include=health,info
            management.endpoint.health.show-details=always
            PROPS_EOF
            
            # 📄 docker-compose.yml 생성 (완벽한 환경변수)
            cat > docker-compose.yml << 'YAML_EOF'
            version: '3.8'
            services:
              spring-server:
                build:
                  context: ./spring-server
                ports:
                  - "8086:8086"
                environment:
                  - "SPRING_PROFILES_ACTIVE=prod"
                  - "SPRING_DATASOURCE_URL=${{ secrets.DB_URL }}"
                  - "SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}"
                  - "SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}"
                  - "SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver"
                  - "SERVER_PORT=8086"
                  - "JWT_SECRET=${{ secrets.JWT_SECRET }}"
                  - "JWT_EXPIRATION=3600000"
                  - "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
                  - "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
                  - "AWS_REGION=${{ secrets.AWS_REGION }}"
                  - "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}"
                container_name: spring-server
                restart: always
                healthcheck:
                  test: ["CMD-SHELL", "curl -f http://localhost:8086/actuator/health || exit 1"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 60s
            YAML_EOF
            
            # 🐳 Docker Compose 실행
            echo "🔨 Building application..."
            docker-compose build --no-cache
            
            echo "🚀 Starting application..."
            docker-compose up -d
            
            # ⏳ 애플리케이션 시작 대기
            echo "⏳ Waiting for application to start..."
            sleep 30
            
            # ✅ 배포 상태 확인
            echo "📊 Deployment Status:"
            docker-compose ps
            
            echo "📋 Application Logs:"
            docker-compose logs spring-server --tail 10
            
            # 🏥 헬스체크
            echo "🏥 Health Check:"
            curl -f http://localhost:8086/actuator/health || echo "❌ Health check failed"
            
            echo "✅ Deployment completed!"