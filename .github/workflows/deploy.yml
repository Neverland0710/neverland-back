name: 🐳 Deploy Spring Boot with Docker to EC2

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout source
        uses: actions/checkout@v3

      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🔨 Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: 🗝️ Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: 📡 Deploy to EC2
        run: |
          # 전체 프로젝트를 tar로 압축해서 한 번에 전송
          tar -czf project.tar.gz --exclude='.git' --exclude='node_modules' .
          
          scp -o StrictHostKeyChecking=no project.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/
          
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # 기존 app 폴더 정리하고 새로 압축 해제
            rm -rf ~/app
            mkdir -p ~/app
            cd ~/app
            tar -xzf ~/project.tar.gz
            rm ~/project.tar.gz
          
            # Docker 컨테이너 정리
            docker stop spring-server || true
            docker rm spring-server || true
          
            # Docker 이미지 빌드
            docker build -t spring-app .
          
            # Docker 컨테이너 실행
            docker run -d \
              --name spring-server \
              -p 8086:8086 \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e AWS_REGION="${{ secrets.AWS_REGION }}" \
              -e S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" \
              -e DB_URL="${{ secrets.DB_URL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e FIREBASE_CONFIG_JSON="${{ secrets.FIREBASE_CONFIG_JSON }}" \
              -e SERVER_PORT=8086 \
              -e SPRING_PROFILES_ACTIVE=prod \
              --restart always \
              spring-app
          
            echo "✅ 배포 완료!"
            docker ps | grep spring-server
          EOF