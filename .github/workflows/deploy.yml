name: 🚀 Deploy to EC2 with Docker Compose

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v3

      - name: 🚀 Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 📁 애플리케이션 디렉토리로 이동
            cd ~/app
            
            # 🧹 기존 컨테이너 정리
            docker-compose down || true
            docker system prune -f
            
            # 📥 최신 코드 받기
            rm -rf spring-server
            git clone https://github.com/Neverland0710/neverland-back.git spring-server
            
            # 📄 .env 파일 생성 (properties 기준으로 맞춤)
            cat > spring-server/.env << 'EOF'
            # 데이터베이스 설정
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            
            # JWT 설정
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRATION=3600000
            
            # AWS S3 설정
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            
            # Firebase 설정
            FIREBASE_CONFIG_JSON=${{ secrets.FIREBASE_CONFIG_JSON }}
            EOF
            
            # 📄 docker-compose.yml 생성 (YAML 안전하게 처리)
            cat > docker-compose.yml << 'YAML_EOF'
            services:
              spring-server:
                build:
                  context: ./spring-server
                ports:
                  - "8086:8086"
                environment:
                  - "DB_URL=${{ secrets.DB_URL }}"
                  - "DB_USERNAME=${{ secrets.DB_USERNAME }}"
                  - "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
                  - "JWT_SECRET=${{ secrets.JWT_SECRET }}"
                  - "JWT_EXPIRATION=3600000"
                  - "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
                  - "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
                  - "AWS_REGION=${{ secrets.AWS_REGION }}"
                  - "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}"
                  - "FIREBASE_CONFIG_JSON=${{ secrets.FIREBASE_CONFIG_JSON }}"
                env_file:
                  - ./spring-server/.env
                container_name: spring-server
                restart: always
                healthcheck:
                  test: ["CMD-SHELL", "curl -f http://localhost:8086/actuator/health || exit 1"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 60s
            YAML_EOF
            
            # 🐳 Docker Compose 실행
            echo "🔨 Building application..."
            docker-compose build --no-cache
            
            echo "🚀 Starting application..."
            docker-compose up -d
            
            # ⏳ 애플리케이션 시작 대기
            echo "⏳ Waiting for application to start..."
            sleep 30
            
            # ✅ 배포 상태 확인
            echo "📊 Deployment Status:"
            docker-compose ps
            
            echo "📋 Application Logs:"
            docker-compose logs spring-server --tail 10
            
            # 🏥 헬스체크
            echo "🏥 Health Check:"
            curl -f http://localhost:8086/actuator/health || echo "❌ Health check failed"
            
            echo "✅ Deployment completed!"