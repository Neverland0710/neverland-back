name: 🚀 Simple Fast Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 🔐 Connect to EC2 & Deploy Spring
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/app
            
            # 기존 컨테이너 정리
            docker rm -f spring-server || true
            
            # 최신 소스 받기
            rm -rf neverland-back
            git clone https://github.com/Neverland0710/neverland-back.git
            cd neverland-back
            
            # 간단한 Dockerfile 생성
            cat > Dockerfile << 'EOF'
            FROM gradle:8.5.0-jdk17 AS builder
            WORKDIR /app
            COPY . .
            RUN gradle build -x test --no-daemon --parallel
            
            FROM openjdk:17-jdk-slim
            WORKDIR /app
            COPY --from=builder /app/build/libs/*.jar app.jar
            EXPOSE 8086
            ENTRYPOINT ["java", "-jar", "app.jar"]
            EOF
            
            # 빌드 및 실행
            docker build -t spring-app .
            docker run -d \
              --name spring-server \
              -p 8086:8086 \
              -e SPRING_DATASOURCE_URL="${{ secrets.DB_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e SPRING_DATASOURCE_DRIVER_CLASS_NAME="com.mysql.cj.jdbc.Driver" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e FIREBASE_CONFIG_JSON='${{ secrets.FIREBASE_CONFIG_JSON }}' \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" \
              -e AWS_REGION="${{ secrets.AWS_REGION }}" \
              -e SERVER_PORT="8086" \
              -e SPRING_PROFILES_ACTIVE="prod" \
              --restart always \
              spring-app
            
            # 상태 확인
            sleep 15
            docker ps | grep spring-server
            docker logs spring-server --tail 10